#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project_Final_Boss
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ColdheartPrison")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCell(Cell instance);
    partial void UpdateCell(Cell instance);
    partial void DeleteCell(Cell instance);
    partial void InsertPrisonerCellAssignment(PrisonerCellAssignment instance);
    partial void UpdatePrisonerCellAssignment(PrisonerCellAssignment instance);
    partial void DeletePrisonerCellAssignment(PrisonerCellAssignment instance);
    partial void InsertPrisonerStatus(PrisonerStatus instance);
    partial void UpdatePrisonerStatus(PrisonerStatus instance);
    partial void DeletePrisonerStatus(PrisonerStatus instance);
    partial void InsertProcessingRecord(ProcessingRecord instance);
    partial void UpdateProcessingRecord(ProcessingRecord instance);
    partial void DeleteProcessingRecord(ProcessingRecord instance);
    partial void InsertSecurityLog(SecurityLog instance);
    partial void UpdateSecurityLog(SecurityLog instance);
    partial void DeleteSecurityLog(SecurityLog instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffRole(StaffRole instance);
    partial void UpdateStaffRole(StaffRole instance);
    partial void DeleteStaffRole(StaffRole instance);
    partial void InsertStaffStatus(StaffStatus instance);
    partial void UpdateStaffStatus(StaffStatus instance);
    partial void DeleteStaffStatus(StaffStatus instance);
    partial void InsertPrisoner(Prisoner instance);
    partial void UpdatePrisoner(Prisoner instance);
    partial void DeletePrisoner(Prisoner instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Project_Final_Boss.Properties.Settings.Default.ColdheartPrisonConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cell> Cells
		{
			get
			{
				return this.GetTable<Cell>();
			}
		}
		
		public System.Data.Linq.Table<PrisonerCellAssignment> PrisonerCellAssignments
		{
			get
			{
				return this.GetTable<PrisonerCellAssignment>();
			}
		}
		
		public System.Data.Linq.Table<PrisonerStatus> PrisonerStatus
		{
			get
			{
				return this.GetTable<PrisonerStatus>();
			}
		}
		
		public System.Data.Linq.Table<ProcessingRecord> ProcessingRecords
		{
			get
			{
				return this.GetTable<ProcessingRecord>();
			}
		}
		
		public System.Data.Linq.Table<SecurityLog> SecurityLogs
		{
			get
			{
				return this.GetTable<SecurityLog>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffRole> StaffRoles
		{
			get
			{
				return this.GetTable<StaffRole>();
			}
		}
		
		public System.Data.Linq.Table<StaffStatus> StaffStatus
		{
			get
			{
				return this.GetTable<StaffStatus>();
			}
		}
		
		public System.Data.Linq.Table<PrisonerDataView> PrisonerDataViews
		{
			get
			{
				return this.GetTable<PrisonerDataView>();
			}
		}
		
		public System.Data.Linq.Table<Prisoner> Prisoners
		{
			get
			{
				return this.GetTable<Prisoner>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cell")]
	public partial class Cell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Cell_ID;
		
		private string _Cell_Number;
		
		private int _Capacity;
		
		private EntitySet<PrisonerCellAssignment> _PrisonerCellAssignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCell_IDChanging(string value);
    partial void OnCell_IDChanged();
    partial void OnCell_NumberChanging(string value);
    partial void OnCell_NumberChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    #endregion
		
		public Cell()
		{
			this._PrisonerCellAssignments = new EntitySet<PrisonerCellAssignment>(new Action<PrisonerCellAssignment>(this.attach_PrisonerCellAssignments), new Action<PrisonerCellAssignment>(this.detach_PrisonerCellAssignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cell_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Cell_ID
		{
			get
			{
				return this._Cell_ID;
			}
			set
			{
				if ((this._Cell_ID != value))
				{
					this.OnCell_IDChanging(value);
					this.SendPropertyChanging();
					this._Cell_ID = value;
					this.SendPropertyChanged("Cell_ID");
					this.OnCell_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cell_Number", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Cell_Number
		{
			get
			{
				return this._Cell_Number;
			}
			set
			{
				if ((this._Cell_Number != value))
				{
					this.OnCell_NumberChanging(value);
					this.SendPropertyChanging();
					this._Cell_Number = value;
					this.SendPropertyChanged("Cell_Number");
					this.OnCell_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cell_PrisonerCellAssignment", Storage="_PrisonerCellAssignments", ThisKey="Cell_ID", OtherKey="Cell_ID")]
		public EntitySet<PrisonerCellAssignment> PrisonerCellAssignments
		{
			get
			{
				return this._PrisonerCellAssignments;
			}
			set
			{
				this._PrisonerCellAssignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrisonerCellAssignments(PrisonerCellAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Cell = this;
		}
		
		private void detach_PrisonerCellAssignments(PrisonerCellAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Cell = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrisonerCellAssignment")]
	public partial class PrisonerCellAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Assignment_ID;
		
		private string _Prisoner_ID;
		
		private string _Cell_ID;
		
		private System.DateTime _Assignment_Date;
		
		private string _Assignment_Status;
		
		private EntityRef<Cell> _Cell;
		
		private EntityRef<Prisoner> _Prisoner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignment_IDChanging(string value);
    partial void OnAssignment_IDChanged();
    partial void OnPrisoner_IDChanging(string value);
    partial void OnPrisoner_IDChanged();
    partial void OnCell_IDChanging(string value);
    partial void OnCell_IDChanged();
    partial void OnAssignment_DateChanging(System.DateTime value);
    partial void OnAssignment_DateChanged();
    partial void OnAssignment_StatusChanging(string value);
    partial void OnAssignment_StatusChanged();
    #endregion
		
		public PrisonerCellAssignment()
		{
			this._Cell = default(EntityRef<Cell>);
			this._Prisoner = default(EntityRef<Prisoner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignment_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Assignment_ID
		{
			get
			{
				return this._Assignment_ID;
			}
			set
			{
				if ((this._Assignment_ID != value))
				{
					this.OnAssignment_IDChanging(value);
					this.SendPropertyChanging();
					this._Assignment_ID = value;
					this.SendPropertyChanged("Assignment_ID");
					this.OnAssignment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_ID
		{
			get
			{
				return this._Prisoner_ID;
			}
			set
			{
				if ((this._Prisoner_ID != value))
				{
					if (this._Prisoner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrisoner_IDChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_ID = value;
					this.SendPropertyChanged("Prisoner_ID");
					this.OnPrisoner_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cell_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Cell_ID
		{
			get
			{
				return this._Cell_ID;
			}
			set
			{
				if ((this._Cell_ID != value))
				{
					if (this._Cell.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCell_IDChanging(value);
					this.SendPropertyChanging();
					this._Cell_ID = value;
					this.SendPropertyChanged("Cell_ID");
					this.OnCell_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignment_Date", DbType="Date NOT NULL")]
		public System.DateTime Assignment_Date
		{
			get
			{
				return this._Assignment_Date;
			}
			set
			{
				if ((this._Assignment_Date != value))
				{
					this.OnAssignment_DateChanging(value);
					this.SendPropertyChanging();
					this._Assignment_Date = value;
					this.SendPropertyChanged("Assignment_Date");
					this.OnAssignment_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignment_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Assignment_Status
		{
			get
			{
				return this._Assignment_Status;
			}
			set
			{
				if ((this._Assignment_Status != value))
				{
					this.OnAssignment_StatusChanging(value);
					this.SendPropertyChanging();
					this._Assignment_Status = value;
					this.SendPropertyChanged("Assignment_Status");
					this.OnAssignment_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cell_PrisonerCellAssignment", Storage="_Cell", ThisKey="Cell_ID", OtherKey="Cell_ID", IsForeignKey=true)]
		public Cell Cell
		{
			get
			{
				return this._Cell.Entity;
			}
			set
			{
				Cell previousValue = this._Cell.Entity;
				if (((previousValue != value) 
							|| (this._Cell.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cell.Entity = null;
						previousValue.PrisonerCellAssignments.Remove(this);
					}
					this._Cell.Entity = value;
					if ((value != null))
					{
						value.PrisonerCellAssignments.Add(this);
						this._Cell_ID = value.Cell_ID;
					}
					else
					{
						this._Cell_ID = default(string);
					}
					this.SendPropertyChanged("Cell");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prisoner_PrisonerCellAssignment", Storage="_Prisoner", ThisKey="Prisoner_ID", OtherKey="Prisoner_ID", IsForeignKey=true)]
		public Prisoner Prisoner
		{
			get
			{
				return this._Prisoner.Entity;
			}
			set
			{
				Prisoner previousValue = this._Prisoner.Entity;
				if (((previousValue != value) 
							|| (this._Prisoner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prisoner.Entity = null;
						previousValue.PrisonerCellAssignments.Remove(this);
					}
					this._Prisoner.Entity = value;
					if ((value != null))
					{
						value.PrisonerCellAssignments.Add(this);
						this._Prisoner_ID = value.Prisoner_ID;
					}
					else
					{
						this._Prisoner_ID = default(string);
					}
					this.SendPropertyChanged("Prisoner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrisonerStatus")]
	public partial class PrisonerStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Prisoner_Status_ID;
		
		private string _Status_Desc;
		
		private EntitySet<Prisoner> _Prisoners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrisoner_Status_IDChanging(int value);
    partial void OnPrisoner_Status_IDChanged();
    partial void OnStatus_DescChanging(string value);
    partial void OnStatus_DescChanged();
    #endregion
		
		public PrisonerStatus()
		{
			this._Prisoners = new EntitySet<Prisoner>(new Action<Prisoner>(this.attach_Prisoners), new Action<Prisoner>(this.detach_Prisoners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_Status_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Prisoner_Status_ID
		{
			get
			{
				return this._Prisoner_Status_ID;
			}
			set
			{
				if ((this._Prisoner_Status_ID != value))
				{
					this.OnPrisoner_Status_IDChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_Status_ID = value;
					this.SendPropertyChanged("Prisoner_Status_ID");
					this.OnPrisoner_Status_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status_Desc
		{
			get
			{
				return this._Status_Desc;
			}
			set
			{
				if ((this._Status_Desc != value))
				{
					this.OnStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._Status_Desc = value;
					this.SendPropertyChanged("Status_Desc");
					this.OnStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrisonerStatus_Prisoner", Storage="_Prisoners", ThisKey="Prisoner_Status_ID", OtherKey="Prisoner_Status_ID")]
		public EntitySet<Prisoner> Prisoners
		{
			get
			{
				return this._Prisoners;
			}
			set
			{
				this._Prisoners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prisoners(Prisoner entity)
		{
			this.SendPropertyChanging();
			entity.PrisonerStatus = this;
		}
		
		private void detach_Prisoners(Prisoner entity)
		{
			this.SendPropertyChanging();
			entity.PrisonerStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessingRecord")]
	public partial class ProcessingRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProcessingRecord_ID;
		
		private string _Prisoner_ID;
		
		private string _Staff_ID;
		
		private System.DateTime _Processing_Date;
		
		private string _Processing_Type;
		
		private System.Data.Linq.Binary _Document;
		
		private string _Document_Description;
		
		private string _Processing_Notes;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Prisoner> _Prisoner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessingRecord_IDChanging(string value);
    partial void OnProcessingRecord_IDChanged();
    partial void OnPrisoner_IDChanging(string value);
    partial void OnPrisoner_IDChanged();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnProcessing_DateChanging(System.DateTime value);
    partial void OnProcessing_DateChanged();
    partial void OnProcessing_TypeChanging(string value);
    partial void OnProcessing_TypeChanged();
    partial void OnDocumentChanging(System.Data.Linq.Binary value);
    partial void OnDocumentChanged();
    partial void OnDocument_DescriptionChanging(string value);
    partial void OnDocument_DescriptionChanged();
    partial void OnProcessing_NotesChanging(string value);
    partial void OnProcessing_NotesChanged();
    #endregion
		
		public ProcessingRecord()
		{
			this._Staff = default(EntityRef<Staff>);
			this._Prisoner = default(EntityRef<Prisoner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessingRecord_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProcessingRecord_ID
		{
			get
			{
				return this._ProcessingRecord_ID;
			}
			set
			{
				if ((this._ProcessingRecord_ID != value))
				{
					this.OnProcessingRecord_IDChanging(value);
					this.SendPropertyChanging();
					this._ProcessingRecord_ID = value;
					this.SendPropertyChanged("ProcessingRecord_ID");
					this.OnProcessingRecord_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_ID
		{
			get
			{
				return this._Prisoner_ID;
			}
			set
			{
				if ((this._Prisoner_ID != value))
				{
					if (this._Prisoner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrisoner_IDChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_ID = value;
					this.SendPropertyChanged("Prisoner_ID");
					this.OnPrisoner_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processing_Date", DbType="Date NOT NULL")]
		public System.DateTime Processing_Date
		{
			get
			{
				return this._Processing_Date;
			}
			set
			{
				if ((this._Processing_Date != value))
				{
					this.OnProcessing_DateChanging(value);
					this.SendPropertyChanging();
					this._Processing_Date = value;
					this.SendPropertyChanged("Processing_Date");
					this.OnProcessing_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processing_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Processing_Type
		{
			get
			{
				return this._Processing_Type;
			}
			set
			{
				if ((this._Processing_Type != value))
				{
					this.OnProcessing_TypeChanging(value);
					this.SendPropertyChanging();
					this._Processing_Type = value;
					this.SendPropertyChanged("Processing_Type");
					this.OnProcessing_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document
		{
			get
			{
				return this._Document;
			}
			set
			{
				if ((this._Document != value))
				{
					this.OnDocumentChanging(value);
					this.SendPropertyChanging();
					this._Document = value;
					this.SendPropertyChanged("Document");
					this.OnDocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document_Description", DbType="VarChar(255)")]
		public string Document_Description
		{
			get
			{
				return this._Document_Description;
			}
			set
			{
				if ((this._Document_Description != value))
				{
					this.OnDocument_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Document_Description = value;
					this.SendPropertyChanged("Document_Description");
					this.OnDocument_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processing_Notes", DbType="VarChar(255)")]
		public string Processing_Notes
		{
			get
			{
				return this._Processing_Notes;
			}
			set
			{
				if ((this._Processing_Notes != value))
				{
					this.OnProcessing_NotesChanging(value);
					this.SendPropertyChanging();
					this._Processing_Notes = value;
					this.SendPropertyChanged("Processing_Notes");
					this.OnProcessing_NotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_ProcessingRecord", Storage="_Staff", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.ProcessingRecords.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.ProcessingRecords.Add(this);
						this._Staff_ID = value.Staff_ID;
					}
					else
					{
						this._Staff_ID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prisoner_ProcessingRecord", Storage="_Prisoner", ThisKey="Prisoner_ID", OtherKey="Prisoner_ID", IsForeignKey=true)]
		public Prisoner Prisoner
		{
			get
			{
				return this._Prisoner.Entity;
			}
			set
			{
				Prisoner previousValue = this._Prisoner.Entity;
				if (((previousValue != value) 
							|| (this._Prisoner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prisoner.Entity = null;
						previousValue.ProcessingRecords.Remove(this);
					}
					this._Prisoner.Entity = value;
					if ((value != null))
					{
						value.ProcessingRecords.Add(this);
						this._Prisoner_ID = value.Prisoner_ID;
					}
					else
					{
						this._Prisoner_ID = default(string);
					}
					this.SendPropertyChanged("Prisoner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityLog")]
	public partial class SecurityLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SecurityLog_ID;
		
		private string _Prisoner_ID;
		
		private System.DateTime _Incident_Date;
		
		private System.TimeSpan _Incident_Time;
		
		private string _Incident_Description;
		
		private string _Staff_ID;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Prisoner> _Prisoner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityLog_IDChanging(string value);
    partial void OnSecurityLog_IDChanged();
    partial void OnPrisoner_IDChanging(string value);
    partial void OnPrisoner_IDChanged();
    partial void OnIncident_DateChanging(System.DateTime value);
    partial void OnIncident_DateChanged();
    partial void OnIncident_TimeChanging(System.TimeSpan value);
    partial void OnIncident_TimeChanged();
    partial void OnIncident_DescriptionChanging(string value);
    partial void OnIncident_DescriptionChanged();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    #endregion
		
		public SecurityLog()
		{
			this._Staff = default(EntityRef<Staff>);
			this._Prisoner = default(EntityRef<Prisoner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityLog_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SecurityLog_ID
		{
			get
			{
				return this._SecurityLog_ID;
			}
			set
			{
				if ((this._SecurityLog_ID != value))
				{
					this.OnSecurityLog_IDChanging(value);
					this.SendPropertyChanging();
					this._SecurityLog_ID = value;
					this.SendPropertyChanged("SecurityLog_ID");
					this.OnSecurityLog_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_ID
		{
			get
			{
				return this._Prisoner_ID;
			}
			set
			{
				if ((this._Prisoner_ID != value))
				{
					if (this._Prisoner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrisoner_IDChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_ID = value;
					this.SendPropertyChanged("Prisoner_ID");
					this.OnPrisoner_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Incident_Date", DbType="Date NOT NULL")]
		public System.DateTime Incident_Date
		{
			get
			{
				return this._Incident_Date;
			}
			set
			{
				if ((this._Incident_Date != value))
				{
					this.OnIncident_DateChanging(value);
					this.SendPropertyChanging();
					this._Incident_Date = value;
					this.SendPropertyChanged("Incident_Date");
					this.OnIncident_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Incident_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Incident_Time
		{
			get
			{
				return this._Incident_Time;
			}
			set
			{
				if ((this._Incident_Time != value))
				{
					this.OnIncident_TimeChanging(value);
					this.SendPropertyChanging();
					this._Incident_Time = value;
					this.SendPropertyChanged("Incident_Time");
					this.OnIncident_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Incident_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Incident_Description
		{
			get
			{
				return this._Incident_Description;
			}
			set
			{
				if ((this._Incident_Description != value))
				{
					this.OnIncident_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Incident_Description = value;
					this.SendPropertyChanged("Incident_Description");
					this.OnIncident_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SecurityLog", Storage="_Staff", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.SecurityLogs.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.SecurityLogs.Add(this);
						this._Staff_ID = value.Staff_ID;
					}
					else
					{
						this._Staff_ID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prisoner_SecurityLog", Storage="_Prisoner", ThisKey="Prisoner_ID", OtherKey="Prisoner_ID", IsForeignKey=true)]
		public Prisoner Prisoner
		{
			get
			{
				return this._Prisoner.Entity;
			}
			set
			{
				Prisoner previousValue = this._Prisoner.Entity;
				if (((previousValue != value) 
							|| (this._Prisoner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prisoner.Entity = null;
						previousValue.SecurityLogs.Remove(this);
					}
					this._Prisoner.Entity = value;
					if ((value != null))
					{
						value.SecurityLogs.Add(this);
						this._Prisoner_ID = value.Prisoner_ID;
					}
					else
					{
						this._Prisoner_ID = default(string);
					}
					this.SendPropertyChanged("Prisoner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_ID;
		
		private string _Staff_Name;
		
		private string _Staff_Username;
		
		private string _Staff_Password;
		
		private int _StaffRole_ID;
		
		private int _StaffStatus_ID;
		
		private EntitySet<ProcessingRecord> _ProcessingRecords;
		
		private EntitySet<SecurityLog> _SecurityLogs;
		
		private EntityRef<StaffRole> _StaffRole;
		
		private EntityRef<StaffStatus> _StaffStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnStaff_NameChanging(string value);
    partial void OnStaff_NameChanged();
    partial void OnStaff_UsernameChanging(string value);
    partial void OnStaff_UsernameChanged();
    partial void OnStaff_PasswordChanging(string value);
    partial void OnStaff_PasswordChanged();
    partial void OnStaffRole_IDChanging(int value);
    partial void OnStaffRole_IDChanged();
    partial void OnStaffStatus_IDChanging(int value);
    partial void OnStaffStatus_IDChanged();
    #endregion
		
		public Staff()
		{
			this._ProcessingRecords = new EntitySet<ProcessingRecord>(new Action<ProcessingRecord>(this.attach_ProcessingRecords), new Action<ProcessingRecord>(this.detach_ProcessingRecords));
			this._SecurityLogs = new EntitySet<SecurityLog>(new Action<SecurityLog>(this.attach_SecurityLogs), new Action<SecurityLog>(this.detach_SecurityLogs));
			this._StaffRole = default(EntityRef<StaffRole>);
			this._StaffStatus = default(EntityRef<StaffStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Name
		{
			get
			{
				return this._Staff_Name;
			}
			set
			{
				if ((this._Staff_Name != value))
				{
					this.OnStaff_NameChanging(value);
					this.SendPropertyChanging();
					this._Staff_Name = value;
					this.SendPropertyChanged("Staff_Name");
					this.OnStaff_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Username
		{
			get
			{
				return this._Staff_Username;
			}
			set
			{
				if ((this._Staff_Username != value))
				{
					this.OnStaff_UsernameChanging(value);
					this.SendPropertyChanging();
					this._Staff_Username = value;
					this.SendPropertyChanged("Staff_Username");
					this.OnStaff_UsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Password
		{
			get
			{
				return this._Staff_Password;
			}
			set
			{
				if ((this._Staff_Password != value))
				{
					this.OnStaff_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Staff_Password = value;
					this.SendPropertyChanged("Staff_Password");
					this.OnStaff_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_ID", DbType="Int NOT NULL")]
		public int StaffRole_ID
		{
			get
			{
				return this._StaffRole_ID;
			}
			set
			{
				if ((this._StaffRole_ID != value))
				{
					if (this._StaffRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffRole_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_ID = value;
					this.SendPropertyChanged("StaffRole_ID");
					this.OnStaffRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_ID", DbType="Int NOT NULL")]
		public int StaffStatus_ID
		{
			get
			{
				return this._StaffStatus_ID;
			}
			set
			{
				if ((this._StaffStatus_ID != value))
				{
					if (this._StaffStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_ID = value;
					this.SendPropertyChanged("StaffStatus_ID");
					this.OnStaffStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_ProcessingRecord", Storage="_ProcessingRecords", ThisKey="Staff_ID", OtherKey="Staff_ID")]
		public EntitySet<ProcessingRecord> ProcessingRecords
		{
			get
			{
				return this._ProcessingRecords;
			}
			set
			{
				this._ProcessingRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SecurityLog", Storage="_SecurityLogs", ThisKey="Staff_ID", OtherKey="Staff_ID")]
		public EntitySet<SecurityLog> SecurityLogs
		{
			get
			{
				return this._SecurityLogs;
			}
			set
			{
				this._SecurityLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_StaffRole", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID", IsForeignKey=true)]
		public StaffRole StaffRole
		{
			get
			{
				return this._StaffRole.Entity;
			}
			set
			{
				StaffRole previousValue = this._StaffRole.Entity;
				if (((previousValue != value) 
							|| (this._StaffRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffRole.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffRole.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffRole_ID = value.StaffRole_ID;
					}
					else
					{
						this._StaffRole_ID = default(int);
					}
					this.SendPropertyChanged("StaffRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_Staff", Storage="_StaffStatus", ThisKey="StaffStatus_ID", OtherKey="StaffStatus_ID", IsForeignKey=true)]
		public StaffStatus StaffStatus
		{
			get
			{
				return this._StaffStatus.Entity;
			}
			set
			{
				StaffStatus previousValue = this._StaffStatus.Entity;
				if (((previousValue != value) 
							|| (this._StaffStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffStatus.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffStatus.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffStatus_ID = value.StaffStatus_ID;
					}
					else
					{
						this._StaffStatus_ID = default(int);
					}
					this.SendPropertyChanged("StaffStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessingRecords(ProcessingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_ProcessingRecords(ProcessingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_SecurityLogs(SecurityLog entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_SecurityLogs(SecurityLog entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffRole")]
	public partial class StaffRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffRole_ID;
		
		private string _Role_Desc;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffRole_IDChanging(int value);
    partial void OnStaffRole_IDChanged();
    partial void OnRole_DescChanging(string value);
    partial void OnRole_DescChanged();
    #endregion
		
		public StaffRole()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StaffRole_ID
		{
			get
			{
				return this._StaffRole_ID;
			}
			set
			{
				if ((this._StaffRole_ID != value))
				{
					this.OnStaffRole_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_ID = value;
					this.SendPropertyChanged("StaffRole_ID");
					this.OnStaffRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Role_Desc
		{
			get
			{
				return this._Role_Desc;
			}
			set
			{
				if ((this._Role_Desc != value))
				{
					this.OnRole_DescChanging(value);
					this.SendPropertyChanging();
					this._Role_Desc = value;
					this.SendPropertyChanged("Role_Desc");
					this.OnRole_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_Staffs", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffStatus")]
	public partial class StaffStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffStatus_ID;
		
		private string _Status_Desc;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffStatus_IDChanging(int value);
    partial void OnStaffStatus_IDChanged();
    partial void OnStatus_DescChanging(string value);
    partial void OnStatus_DescChanged();
    #endregion
		
		public StaffStatus()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffStatus_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StaffStatus_ID
		{
			get
			{
				return this._StaffStatus_ID;
			}
			set
			{
				if ((this._StaffStatus_ID != value))
				{
					this.OnStaffStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffStatus_ID = value;
					this.SendPropertyChanged("StaffStatus_ID");
					this.OnStaffStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status_Desc
		{
			get
			{
				return this._Status_Desc;
			}
			set
			{
				if ((this._Status_Desc != value))
				{
					this.OnStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._Status_Desc = value;
					this.SendPropertyChanged("Status_Desc");
					this.OnStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffStatus_Staff", Storage="_Staffs", ThisKey="StaffStatus_ID", OtherKey="StaffStatus_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrisonerDataView")]
	public partial class PrisonerDataView
	{
		
		private string _Prisoner_ID;
		
		private string _Prisoner_Surname;
		
		private string _Prisoner_GivenName;
		
		private string _Prisoner_MiddleName;
		
		private char _Prisoner_Sex;
		
		private System.DateTime _Date_Of_Birth;
		
		private string _Crime_Desc;
		
		private int _Sentence_Years;
		
		private System.DateTime _Admission_Date;
		
		private System.Nullable<System.DateTime> _Release_Date;
		
		private string _Prisoner_Status;
		
		private System.Data.Linq.Binary _Mugshot_Data;
		
		private string _Mugshot_Path;
		
		public PrisonerDataView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_ID
		{
			get
			{
				return this._Prisoner_ID;
			}
			set
			{
				if ((this._Prisoner_ID != value))
				{
					this._Prisoner_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_Surname
		{
			get
			{
				return this._Prisoner_Surname;
			}
			set
			{
				if ((this._Prisoner_Surname != value))
				{
					this._Prisoner_Surname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_GivenName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_GivenName
		{
			get
			{
				return this._Prisoner_GivenName;
			}
			set
			{
				if ((this._Prisoner_GivenName != value))
				{
					this._Prisoner_GivenName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_MiddleName", DbType="VarChar(50)")]
		public string Prisoner_MiddleName
		{
			get
			{
				return this._Prisoner_MiddleName;
			}
			set
			{
				if ((this._Prisoner_MiddleName != value))
				{
					this._Prisoner_MiddleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_Sex", DbType="Char(1) NOT NULL")]
		public char Prisoner_Sex
		{
			get
			{
				return this._Prisoner_Sex;
			}
			set
			{
				if ((this._Prisoner_Sex != value))
				{
					this._Prisoner_Sex = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Birth", DbType="Date NOT NULL")]
		public System.DateTime Date_Of_Birth
		{
			get
			{
				return this._Date_Of_Birth;
			}
			set
			{
				if ((this._Date_Of_Birth != value))
				{
					this._Date_Of_Birth = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crime_Desc", DbType="VarChar(255)")]
		public string Crime_Desc
		{
			get
			{
				return this._Crime_Desc;
			}
			set
			{
				if ((this._Crime_Desc != value))
				{
					this._Crime_Desc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sentence_Years", DbType="Int NOT NULL")]
		public int Sentence_Years
		{
			get
			{
				return this._Sentence_Years;
			}
			set
			{
				if ((this._Sentence_Years != value))
				{
					this._Sentence_Years = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admission_Date", DbType="Date NOT NULL")]
		public System.DateTime Admission_Date
		{
			get
			{
				return this._Admission_Date;
			}
			set
			{
				if ((this._Admission_Date != value))
				{
					this._Admission_Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Release_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Release_Date
		{
			get
			{
				return this._Release_Date;
			}
			set
			{
				if ((this._Release_Date != value))
				{
					this._Release_Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_Status", DbType="VarChar(50)")]
		public string Prisoner_Status
		{
			get
			{
				return this._Prisoner_Status;
			}
			set
			{
				if ((this._Prisoner_Status != value))
				{
					this._Prisoner_Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mugshot_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Mugshot_Data
		{
			get
			{
				return this._Mugshot_Data;
			}
			set
			{
				if ((this._Mugshot_Data != value))
				{
					this._Mugshot_Data = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mugshot_Path", DbType="VarChar(255)")]
		public string Mugshot_Path
		{
			get
			{
				return this._Mugshot_Path;
			}
			set
			{
				if ((this._Mugshot_Path != value))
				{
					this._Mugshot_Path = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prisoner")]
	public partial class Prisoner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Prisoner_ID;
		
		private string _Prisoner_Surname;
		
		private string _Prisoner_GivenName;
		
		private string _Prisoner_MiddleName;
		
		private char _Prisoner_Sex;
		
		private System.DateTime _Date_Of_Birth;
		
		private string _Crime_Desc;
		
		private int _Sentence_Years;
		
		private System.DateTime _Admission_Date;
		
		private System.Nullable<System.DateTime> _Release_Date;
		
		private int _Prisoner_Status_ID;
		
		private System.Data.Linq.Binary _Mugshot_Data;
		
		private string _Mugshot_Path;
		
		private EntitySet<PrisonerCellAssignment> _PrisonerCellAssignments;
		
		private EntitySet<ProcessingRecord> _ProcessingRecords;
		
		private EntitySet<SecurityLog> _SecurityLogs;
		
		private EntityRef<PrisonerStatus> _PrisonerStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrisoner_IDChanging(string value);
    partial void OnPrisoner_IDChanged();
    partial void OnPrisoner_SurnameChanging(string value);
    partial void OnPrisoner_SurnameChanged();
    partial void OnPrisoner_GivenNameChanging(string value);
    partial void OnPrisoner_GivenNameChanged();
    partial void OnPrisoner_MiddleNameChanging(string value);
    partial void OnPrisoner_MiddleNameChanged();
    partial void OnPrisoner_SexChanging(char value);
    partial void OnPrisoner_SexChanged();
    partial void OnDate_Of_BirthChanging(System.DateTime value);
    partial void OnDate_Of_BirthChanged();
    partial void OnCrime_DescChanging(string value);
    partial void OnCrime_DescChanged();
    partial void OnSentence_YearsChanging(int value);
    partial void OnSentence_YearsChanged();
    partial void OnAdmission_DateChanging(System.DateTime value);
    partial void OnAdmission_DateChanged();
    partial void OnRelease_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnRelease_DateChanged();
    partial void OnPrisoner_Status_IDChanging(int value);
    partial void OnPrisoner_Status_IDChanged();
    partial void OnMugshot_DataChanging(System.Data.Linq.Binary value);
    partial void OnMugshot_DataChanged();
    partial void OnMugshot_PathChanging(string value);
    partial void OnMugshot_PathChanged();
    #endregion
		
		public Prisoner()
		{
			this._PrisonerCellAssignments = new EntitySet<PrisonerCellAssignment>(new Action<PrisonerCellAssignment>(this.attach_PrisonerCellAssignments), new Action<PrisonerCellAssignment>(this.detach_PrisonerCellAssignments));
			this._ProcessingRecords = new EntitySet<ProcessingRecord>(new Action<ProcessingRecord>(this.attach_ProcessingRecords), new Action<ProcessingRecord>(this.detach_ProcessingRecords));
			this._SecurityLogs = new EntitySet<SecurityLog>(new Action<SecurityLog>(this.attach_SecurityLogs), new Action<SecurityLog>(this.detach_SecurityLogs));
			this._PrisonerStatus = default(EntityRef<PrisonerStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Prisoner_ID
		{
			get
			{
				return this._Prisoner_ID;
			}
			set
			{
				if ((this._Prisoner_ID != value))
				{
					this.OnPrisoner_IDChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_ID = value;
					this.SendPropertyChanged("Prisoner_ID");
					this.OnPrisoner_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_Surname
		{
			get
			{
				return this._Prisoner_Surname;
			}
			set
			{
				if ((this._Prisoner_Surname != value))
				{
					this.OnPrisoner_SurnameChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_Surname = value;
					this.SendPropertyChanged("Prisoner_Surname");
					this.OnPrisoner_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_GivenName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Prisoner_GivenName
		{
			get
			{
				return this._Prisoner_GivenName;
			}
			set
			{
				if ((this._Prisoner_GivenName != value))
				{
					this.OnPrisoner_GivenNameChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_GivenName = value;
					this.SendPropertyChanged("Prisoner_GivenName");
					this.OnPrisoner_GivenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_MiddleName", DbType="VarChar(50)")]
		public string Prisoner_MiddleName
		{
			get
			{
				return this._Prisoner_MiddleName;
			}
			set
			{
				if ((this._Prisoner_MiddleName != value))
				{
					this.OnPrisoner_MiddleNameChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_MiddleName = value;
					this.SendPropertyChanged("Prisoner_MiddleName");
					this.OnPrisoner_MiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_Sex", DbType="Char(1) NOT NULL")]
		public char Prisoner_Sex
		{
			get
			{
				return this._Prisoner_Sex;
			}
			set
			{
				if ((this._Prisoner_Sex != value))
				{
					this.OnPrisoner_SexChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_Sex = value;
					this.SendPropertyChanged("Prisoner_Sex");
					this.OnPrisoner_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Birth", DbType="Date NOT NULL")]
		public System.DateTime Date_Of_Birth
		{
			get
			{
				return this._Date_Of_Birth;
			}
			set
			{
				if ((this._Date_Of_Birth != value))
				{
					this.OnDate_Of_BirthChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Birth = value;
					this.SendPropertyChanged("Date_Of_Birth");
					this.OnDate_Of_BirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crime_Desc", DbType="VarChar(255)")]
		public string Crime_Desc
		{
			get
			{
				return this._Crime_Desc;
			}
			set
			{
				if ((this._Crime_Desc != value))
				{
					this.OnCrime_DescChanging(value);
					this.SendPropertyChanging();
					this._Crime_Desc = value;
					this.SendPropertyChanged("Crime_Desc");
					this.OnCrime_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sentence_Years", DbType="Int NOT NULL")]
		public int Sentence_Years
		{
			get
			{
				return this._Sentence_Years;
			}
			set
			{
				if ((this._Sentence_Years != value))
				{
					this.OnSentence_YearsChanging(value);
					this.SendPropertyChanging();
					this._Sentence_Years = value;
					this.SendPropertyChanged("Sentence_Years");
					this.OnSentence_YearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admission_Date", DbType="Date NOT NULL")]
		public System.DateTime Admission_Date
		{
			get
			{
				return this._Admission_Date;
			}
			set
			{
				if ((this._Admission_Date != value))
				{
					this.OnAdmission_DateChanging(value);
					this.SendPropertyChanging();
					this._Admission_Date = value;
					this.SendPropertyChanged("Admission_Date");
					this.OnAdmission_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Release_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Release_Date
		{
			get
			{
				return this._Release_Date;
			}
			set
			{
				if ((this._Release_Date != value))
				{
					this.OnRelease_DateChanging(value);
					this.SendPropertyChanging();
					this._Release_Date = value;
					this.SendPropertyChanged("Release_Date");
					this.OnRelease_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prisoner_Status_ID", DbType="Int NOT NULL")]
		public int Prisoner_Status_ID
		{
			get
			{
				return this._Prisoner_Status_ID;
			}
			set
			{
				if ((this._Prisoner_Status_ID != value))
				{
					if (this._PrisonerStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrisoner_Status_IDChanging(value);
					this.SendPropertyChanging();
					this._Prisoner_Status_ID = value;
					this.SendPropertyChanged("Prisoner_Status_ID");
					this.OnPrisoner_Status_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mugshot_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Mugshot_Data
		{
			get
			{
				return this._Mugshot_Data;
			}
			set
			{
				if ((this._Mugshot_Data != value))
				{
					this.OnMugshot_DataChanging(value);
					this.SendPropertyChanging();
					this._Mugshot_Data = value;
					this.SendPropertyChanged("Mugshot_Data");
					this.OnMugshot_DataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mugshot_Path", DbType="VarChar(255)")]
		public string Mugshot_Path
		{
			get
			{
				return this._Mugshot_Path;
			}
			set
			{
				if ((this._Mugshot_Path != value))
				{
					this.OnMugshot_PathChanging(value);
					this.SendPropertyChanging();
					this._Mugshot_Path = value;
					this.SendPropertyChanged("Mugshot_Path");
					this.OnMugshot_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prisoner_PrisonerCellAssignment", Storage="_PrisonerCellAssignments", ThisKey="Prisoner_ID", OtherKey="Prisoner_ID")]
		public EntitySet<PrisonerCellAssignment> PrisonerCellAssignments
		{
			get
			{
				return this._PrisonerCellAssignments;
			}
			set
			{
				this._PrisonerCellAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prisoner_ProcessingRecord", Storage="_ProcessingRecords", ThisKey="Prisoner_ID", OtherKey="Prisoner_ID")]
		public EntitySet<ProcessingRecord> ProcessingRecords
		{
			get
			{
				return this._ProcessingRecords;
			}
			set
			{
				this._ProcessingRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prisoner_SecurityLog", Storage="_SecurityLogs", ThisKey="Prisoner_ID", OtherKey="Prisoner_ID")]
		public EntitySet<SecurityLog> SecurityLogs
		{
			get
			{
				return this._SecurityLogs;
			}
			set
			{
				this._SecurityLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrisonerStatus_Prisoner", Storage="_PrisonerStatus", ThisKey="Prisoner_Status_ID", OtherKey="Prisoner_Status_ID", IsForeignKey=true)]
		public PrisonerStatus PrisonerStatus
		{
			get
			{
				return this._PrisonerStatus.Entity;
			}
			set
			{
				PrisonerStatus previousValue = this._PrisonerStatus.Entity;
				if (((previousValue != value) 
							|| (this._PrisonerStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrisonerStatus.Entity = null;
						previousValue.Prisoners.Remove(this);
					}
					this._PrisonerStatus.Entity = value;
					if ((value != null))
					{
						value.Prisoners.Add(this);
						this._Prisoner_Status_ID = value.Prisoner_Status_ID;
					}
					else
					{
						this._Prisoner_Status_ID = default(int);
					}
					this.SendPropertyChanged("PrisonerStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrisonerCellAssignments(PrisonerCellAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Prisoner = this;
		}
		
		private void detach_PrisonerCellAssignments(PrisonerCellAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Prisoner = null;
		}
		
		private void attach_ProcessingRecords(ProcessingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Prisoner = this;
		}
		
		private void detach_ProcessingRecords(ProcessingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Prisoner = null;
		}
		
		private void attach_SecurityLogs(SecurityLog entity)
		{
			this.SendPropertyChanging();
			entity.Prisoner = this;
		}
		
		private void detach_SecurityLogs(SecurityLog entity)
		{
			this.SendPropertyChanging();
			entity.Prisoner = null;
		}
	}
}
#pragma warning restore 1591
